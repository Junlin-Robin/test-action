name: Create Tag And Deploy In PROD_ENV

on:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  createTag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 确保获取所有历史以便正确生成标签

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh


      - name: Setup Git
        run: |
          echo "🏠 Setting global git config informations"
          git config --global user.email "347258143@qq.com"
          git config --global user.name "Github-action"
          # gh auth setup-git

      - name: Create new branch for version upgrade
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "start"
          git pull
          git checkout -b "version-upgrade"
          echo "reset"
          # git pull
          # git reset origin/master
          # # echo "pull"
          # # git fetch origin

          # echo 'start log'

          # LOG_FILE_PATTERN="\.versions/.*\.log\.md"
          # echo "log file pattern is $LOG_FILE_PATTERN"
          # echo "diff: $(git diff --name-only origin/master@{1} origin/master)"
          # LOG_FILE_NAME=$(git diff --name-only origin/master@{1} origin/master | grep -e $LOG_FILE_PATTERN)
          # echo "log file name is $LOG_FILE_NAME"

          # LOG_TYPE_PATTERN="\.versions/.*\.type"
          # LOG_TYPE_NAME=$(git diff --name-only origin/master@{1} origin/master | grep -e $LOG_TYPE_PATTERN)

          # if [ -z $LOG_TYPE_NAME ]
          # then
          #   VERSION_TYPE=$(grep 'VERSION_TYPE' $LOG_TYPE_NAME | cut -d '=' -f2) || VERSION_TYPE=patch
          # else
          #   VERSION_TYPE=patch
          # fi

          ###########
          VERSION_TYPE=patch
          LOG_FILE_NAME=.versions/v1.1.1.log.md
          ###########

          echo "version type is $VERSION_TYPE"

          content=$(cat $LOG_FILE_NAME)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=content::$content"
          echo "CONTENT=$content" >> $GITHUB_ENV
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

          npm version $VERSION_TYPE -m "Upgrade to %s due to PR merge"
          git push origin version-upgrade

          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV
          git push origin $TAG

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          body: ${{ env.CONTENT }}
          draft: false
          prerelease: false

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          PR_DETAILS=$(gh pr create --base master --head version-upgrade --title "Auto Version Upgrade" --body "Automatically upgrade version due to PR merge.")
          PR_NUMBER=$(echo $PR_DETAILS | grep -o '[0-9]*$')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Auto merge PR
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ env.PR_NUMBER }} --admin --merge

  deploy-in-production:
    needs: createTag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 确保获取所有历史以便正确生成标签

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: yarn

      - name: Lint
        run: yarn run lint
      
      - name: Build
        run: |
          ENV=production
          echo "Current environment is production 🏭"
          echo "ENV=$ENV" >> $GITHUB_ENV

          # CURRENT_TAG=${{ needs.create-tag.outputs.TAG }}
          # echo "Current tag is $CURRENT_TAG 🌿"

          echo "OUT_DIR=$(grep 'VITE_BUILD_OUT_DIR' .env.$ENV | cut -d '=' -f2)" >> $GITHUB_ENV

          git checkout master

          yarn run build -- --mode $ENV

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages     # 部署到 gh-pages 分支
          folder: ${{ env.OUT_DIR }} # 部署目录见配置
          target-folder: /${{ env.ENV }} # 部署根目录
          clean: true     # 先清理之前的部署
          token: ${{ secrets.GITHUB_TOKEN }}

    




      
